import 'package:flutter/material.dart';
import 'package:flutterapp/mcstockmanageapp/generatedwidget3/GeneratedWidget3.dart';
import 'package:flutterapp/mcstockmanageapp/generatedwidget3/generated/GeneratedProduct1Widget.dart';
import 'package:http/http.dart' as http;
import 'dart:async';
import 'dart:convert' as convert;
import 'dart:convert';
import 'dart:developer';
import 'dart:io';

/* Text ค้นหา
    Autogenerated by FlutLab FTF Generator
  */
class GeneratedWidget5 extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Container(
        width: 200,
        height: 100,
        color: Colors.white,
        child: TextField(
          onChanged: (search) async {
            final response =
                await http.post(Uri.parse('http://119.63.90.135:9090/product'),
                    headers: <String, String>{
                      'Content-Type': 'application/json; charset=UTF-8',
                    },
                    body: convert.jsonEncode(<String, String>{
                      'operation': 'get_product_detail',
                      'productId': search,
                    }));
            if (response.statusCode == 200) {
              // If the server did return a 200 OK response,
              // then parse the JSON.
              print(jsonDecode(response.body)['data']);
                    if (jsonDecode(response.body)['data'] == '' ||
                        jsonDecode(response.body)['data'] == null ||
                        jsonDecode(response.body)['data'] == 'null') {
                      print('sssss');
                      // Navigator.push(context, MaterialPageRoute());
                    } else {
                      print('scan done');
                      Navigator.push(context, MaterialPageRoute(builder: (context) => GeneratedWidget3()));
                      final albums = Album.fromJson(
                          Map<String, dynamic>.from(jsonDecode(response.body)['data']));
                      // cproductName.text = albums.name.toString();
                      // csku.text = albums.sku.toString();
                      // cqty.text = albums.qty.toString();
                      // cshelf.text = albums.shelf.toString();
                      // cgroupName.text = albums.groupName.toString();
                      // cgodown.text = albums.godown.toString();
                      // cproductId.text = albums.id.toString();

                      return Album.fromJson(
                          Map<String, dynamic>.from(jsonDecode(response.body)['data']));
                    }
            } else {
              // If the server did not return a 200 OK response,
              // then throw an exception.
              throw Exception('Failed to load album');
            }
          },
          decoration: InputDecoration(
            suffixIcon: Icon(Icons.search),
            border: OutlineInputBorder(),
            hintText: 'ค้นหา',
          ),
        ));
  }
}
class Album {
  final String id;
  final String sku;
  final String name;
  final String description;
  final String groupId;
  final String groupName;
  final String shelf;
  final String godown;
  final double price;
  final int qty;
  final int isActive;
  final int isDelete;

  Album(
      {this.id,
      this.sku,
      this.name,
      this.description,
      this.groupId,
      this.groupName,
      this.shelf,
      this.godown,
      this.price,
      this.qty,
      this.isActive,
      this.isDelete});

  factory Album.fromJson(Map<String, dynamic> parsedJson) {
    return Album(
        id: parsedJson['id'] as String,
        sku: parsedJson['sku'] as String,
        name: parsedJson['name'] as String,
        description: parsedJson['description'] as String,
        groupId: parsedJson['groupId'] as String,
        groupName: parsedJson['groupName'] as String,
        shelf: parsedJson['shelf'] as String,
        godown: parsedJson['godown'] as String,
        price: parsedJson['price'],
        qty: parsedJson['qty'],
        isActive: parsedJson['isActive'],
        isDelete: parsedJson['isDelete']);
  }
}
